//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PersonalData = newPersonalDataTable("merch_store", "personal_data", "")

type personalDataTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnString
	UserID         postgres.ColumnString
	HashedPassword postgres.ColumnString
	Salt           postgres.ColumnString
	CreatedAt      postgres.ColumnTimestamp
	UpdatedAt      postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PersonalDataTable struct {
	personalDataTable

	EXCLUDED personalDataTable
}

// AS creates new PersonalDataTable with assigned alias
func (a PersonalDataTable) AS(alias string) *PersonalDataTable {
	return newPersonalDataTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PersonalDataTable with assigned schema name
func (a PersonalDataTable) FromSchema(schemaName string) *PersonalDataTable {
	return newPersonalDataTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PersonalDataTable with assigned table prefix
func (a PersonalDataTable) WithPrefix(prefix string) *PersonalDataTable {
	return newPersonalDataTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PersonalDataTable with assigned table suffix
func (a PersonalDataTable) WithSuffix(suffix string) *PersonalDataTable {
	return newPersonalDataTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPersonalDataTable(schemaName, tableName, alias string) *PersonalDataTable {
	return &PersonalDataTable{
		personalDataTable: newPersonalDataTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newPersonalDataTableImpl("", "excluded", ""),
	}
}

func newPersonalDataTableImpl(schemaName, tableName, alias string) personalDataTable {
	var (
		IDColumn             = postgres.StringColumn("id")
		UserIDColumn         = postgres.StringColumn("user_id")
		HashedPasswordColumn = postgres.StringColumn("hashed_password")
		SaltColumn           = postgres.StringColumn("salt")
		CreatedAtColumn      = postgres.TimestampColumn("created_at")
		UpdatedAtColumn      = postgres.TimestampColumn("updated_at")
		allColumns           = postgres.ColumnList{IDColumn, UserIDColumn, HashedPasswordColumn, SaltColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns       = postgres.ColumnList{UserIDColumn, HashedPasswordColumn, SaltColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return personalDataTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		UserID:         UserIDColumn,
		HashedPassword: HashedPasswordColumn,
		Salt:           SaltColumn,
		CreatedAt:      CreatedAtColumn,
		UpdatedAt:      UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
