// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/storage/service.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/litvinovmitch11/avito-merch-store/internal/entities"
)

// MockStorageService is a mock of StorageService interface.
type MockStorageService struct {
	ctrl     *gomock.Controller
	recorder *MockStorageServiceMockRecorder
}

// MockStorageServiceMockRecorder is the mock recorder for MockStorageService.
type MockStorageServiceMockRecorder struct {
	mock *MockStorageService
}

// NewMockStorageService creates a new mock instance.
func NewMockStorageService(ctrl *gomock.Controller) *MockStorageService {
	mock := &MockStorageService{ctrl: ctrl}
	mock.recorder = &MockStorageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageService) EXPECT() *MockStorageServiceMockRecorder {
	return m.recorder
}

// BuyMerch mocks base method.
func (m *MockStorageService) BuyMerch(userID, merchID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyMerch", userID, merchID)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuyMerch indicates an expected call of BuyMerch.
func (mr *MockStorageServiceMockRecorder) BuyMerch(userID, merchID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyMerch", reflect.TypeOf((*MockStorageService)(nil).BuyMerch), userID, merchID)
}

// GetBalance mocks base method.
func (m *MockStorageService) GetBalance(userID string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockStorageServiceMockRecorder) GetBalance(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockStorageService)(nil).GetBalance), userID)
}

// GetHistory mocks base method.
func (m *MockStorageService) GetHistory(userID string) (entities.CoinHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistory", userID)
	ret0, _ := ret[0].(entities.CoinHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistory indicates an expected call of GetHistory.
func (mr *MockStorageServiceMockRecorder) GetHistory(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistory", reflect.TypeOf((*MockStorageService)(nil).GetHistory), userID)
}

// GetInventory mocks base method.
func (m *MockStorageService) GetInventory(userID string) (entities.Inventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInventory", userID)
	ret0, _ := ret[0].(entities.Inventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInventory indicates an expected call of GetInventory.
func (mr *MockStorageServiceMockRecorder) GetInventory(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInventory", reflect.TypeOf((*MockStorageService)(nil).GetInventory), userID)
}

// SendCoins mocks base method.
func (m *MockStorageService) SendCoins(sendCoin entities.SendCoin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoins", sendCoin)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCoins indicates an expected call of SendCoins.
func (mr *MockStorageServiceMockRecorder) SendCoins(sendCoin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoins", reflect.TypeOf((*MockStorageService)(nil).SendCoins), sendCoin)
}
