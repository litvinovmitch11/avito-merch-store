// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/products/service.go

// Package mock_products is a generated GoMock package.
package mock_products

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/litvinovmitch11/avito-merch-store/internal/entities"
)

// MockProductsService is a mock of ProductsService interface.
type MockProductsService struct {
	ctrl     *gomock.Controller
	recorder *MockProductsServiceMockRecorder
}

// MockProductsServiceMockRecorder is the mock recorder for MockProductsService.
type MockProductsServiceMockRecorder struct {
	mock *MockProductsService
}

// NewMockProductsService creates a new mock instance.
func NewMockProductsService(ctrl *gomock.Controller) *MockProductsService {
	mock := &MockProductsService{ctrl: ctrl}
	mock.recorder = &MockProductsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductsService) EXPECT() *MockProductsServiceMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockProductsService) AddProduct(product entities.Product) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", product)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockProductsServiceMockRecorder) AddProduct(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockProductsService)(nil).AddProduct), product)
}
